// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Batch.Models
{
    public partial class PoolSpecification : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (DisplayName != null)
            {
                writer.WritePropertyName("displayName");
                writer.WriteStringValue(DisplayName);
            }
            writer.WritePropertyName("vmSize");
            writer.WriteStringValue(VmSize);
            if (CloudServiceConfiguration != null)
            {
                writer.WritePropertyName("cloudServiceConfiguration");
                writer.WriteObjectValue(CloudServiceConfiguration);
            }
            if (VirtualMachineConfiguration != null)
            {
                writer.WritePropertyName("virtualMachineConfiguration");
                writer.WriteObjectValue(VirtualMachineConfiguration);
            }
            if (MaxTasksPerNode != null)
            {
                writer.WritePropertyName("maxTasksPerNode");
                writer.WriteNumberValue(MaxTasksPerNode.Value);
            }
            if (TaskSchedulingPolicy != null)
            {
                writer.WritePropertyName("taskSchedulingPolicy");
                writer.WriteObjectValue(TaskSchedulingPolicy);
            }
            if (ResizeTimeout != null)
            {
                writer.WritePropertyName("resizeTimeout");
                writer.WriteStringValue(ResizeTimeout.Value, "P");
            }
            if (TargetDedicatedNodes != null)
            {
                writer.WritePropertyName("targetDedicatedNodes");
                writer.WriteNumberValue(TargetDedicatedNodes.Value);
            }
            if (TargetLowPriorityNodes != null)
            {
                writer.WritePropertyName("targetLowPriorityNodes");
                writer.WriteNumberValue(TargetLowPriorityNodes.Value);
            }
            if (EnableAutoScale != null)
            {
                writer.WritePropertyName("enableAutoScale");
                writer.WriteBooleanValue(EnableAutoScale.Value);
            }
            if (AutoScaleFormula != null)
            {
                writer.WritePropertyName("autoScaleFormula");
                writer.WriteStringValue(AutoScaleFormula);
            }
            if (AutoScaleEvaluationInterval != null)
            {
                writer.WritePropertyName("autoScaleEvaluationInterval");
                writer.WriteStringValue(AutoScaleEvaluationInterval.Value, "P");
            }
            if (EnableInterNodeCommunication != null)
            {
                writer.WritePropertyName("enableInterNodeCommunication");
                writer.WriteBooleanValue(EnableInterNodeCommunication.Value);
            }
            if (NetworkConfiguration != null)
            {
                writer.WritePropertyName("networkConfiguration");
                writer.WriteObjectValue(NetworkConfiguration);
            }
            if (StartTask != null)
            {
                writer.WritePropertyName("startTask");
                writer.WriteObjectValue(StartTask);
            }
            if (CertificateReferences != null)
            {
                writer.WritePropertyName("certificateReferences");
                writer.WriteStartArray();
                foreach (var item in CertificateReferences)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (ApplicationPackageReferences != null)
            {
                writer.WritePropertyName("applicationPackageReferences");
                writer.WriteStartArray();
                foreach (var item in ApplicationPackageReferences)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (ApplicationLicenses != null)
            {
                writer.WritePropertyName("applicationLicenses");
                writer.WriteStartArray();
                foreach (var item in ApplicationLicenses)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (UserAccounts != null)
            {
                writer.WritePropertyName("userAccounts");
                writer.WriteStartArray();
                foreach (var item in UserAccounts)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Metadata != null)
            {
                writer.WritePropertyName("metadata");
                writer.WriteStartArray();
                foreach (var item in Metadata)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (MountConfiguration != null)
            {
                writer.WritePropertyName("mountConfiguration");
                writer.WriteStartArray();
                foreach (var item in MountConfiguration)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static PoolSpecification DeserializePoolSpecification(JsonElement element)
        {
            string displayName = default;
            string vmSize = default;
            CloudServiceConfiguration cloudServiceConfiguration = default;
            VirtualMachineConfiguration virtualMachineConfiguration = default;
            int? maxTasksPerNode = default;
            TaskSchedulingPolicy taskSchedulingPolicy = default;
            TimeSpan? resizeTimeout = default;
            int? targetDedicatedNodes = default;
            int? targetLowPriorityNodes = default;
            bool? enableAutoScale = default;
            string autoScaleFormula = default;
            TimeSpan? autoScaleEvaluationInterval = default;
            bool? enableInterNodeCommunication = default;
            NetworkConfiguration networkConfiguration = default;
            StartTask startTask = default;
            IList<CertificateReference> certificateReferences = default;
            IList<ApplicationPackageReference> applicationPackageReferences = default;
            IList<string> applicationLicenses = default;
            IList<UserAccount> userAccounts = default;
            IList<MetadataItem> metadata = default;
            IList<MountConfiguration> mountConfiguration = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("displayName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vmSize"))
                {
                    vmSize = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cloudServiceConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cloudServiceConfiguration = CloudServiceConfiguration.DeserializeCloudServiceConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("virtualMachineConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    virtualMachineConfiguration = VirtualMachineConfiguration.DeserializeVirtualMachineConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("maxTasksPerNode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxTasksPerNode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("taskSchedulingPolicy"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    taskSchedulingPolicy = TaskSchedulingPolicy.DeserializeTaskSchedulingPolicy(property.Value);
                    continue;
                }
                if (property.NameEquals("resizeTimeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resizeTimeout = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("targetDedicatedNodes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetDedicatedNodes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("targetLowPriorityNodes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetLowPriorityNodes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("enableAutoScale"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableAutoScale = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("autoScaleFormula"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoScaleFormula = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("autoScaleEvaluationInterval"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoScaleEvaluationInterval = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("enableInterNodeCommunication"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableInterNodeCommunication = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("networkConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    networkConfiguration = NetworkConfiguration.DeserializeNetworkConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("startTask"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startTask = StartTask.DeserializeStartTask(property.Value);
                    continue;
                }
                if (property.NameEquals("certificateReferences"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CertificateReference> array = new List<CertificateReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CertificateReference.DeserializeCertificateReference(item));
                    }
                    certificateReferences = array;
                    continue;
                }
                if (property.NameEquals("applicationPackageReferences"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ApplicationPackageReference> array = new List<ApplicationPackageReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ApplicationPackageReference.DeserializeApplicationPackageReference(item));
                    }
                    applicationPackageReferences = array;
                    continue;
                }
                if (property.NameEquals("applicationLicenses"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    applicationLicenses = array;
                    continue;
                }
                if (property.NameEquals("userAccounts"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<UserAccount> array = new List<UserAccount>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(UserAccount.DeserializeUserAccount(item));
                    }
                    userAccounts = array;
                    continue;
                }
                if (property.NameEquals("metadata"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MetadataItem> array = new List<MetadataItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MetadataItem.DeserializeMetadataItem(item));
                    }
                    metadata = array;
                    continue;
                }
                if (property.NameEquals("mountConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MountConfiguration> array = new List<MountConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.MountConfiguration.DeserializeMountConfiguration(item));
                    }
                    mountConfiguration = array;
                    continue;
                }
            }
            return new PoolSpecification(displayName, vmSize, cloudServiceConfiguration, virtualMachineConfiguration, maxTasksPerNode, taskSchedulingPolicy, resizeTimeout, targetDedicatedNodes, targetLowPriorityNodes, enableAutoScale, autoScaleFormula, autoScaleEvaluationInterval, enableInterNodeCommunication, networkConfiguration, startTask, certificateReferences, applicationPackageReferences, applicationLicenses, userAccounts, metadata, mountConfiguration);
        }
    }
}
