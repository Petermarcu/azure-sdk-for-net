// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Batch.Models
{
    public partial class JobReleaseTask : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Id != null)
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(Id);
            }
            writer.WritePropertyName("commandLine");
            writer.WriteStringValue(CommandLine);
            if (ContainerSettings != null)
            {
                writer.WritePropertyName("containerSettings");
                writer.WriteObjectValue(ContainerSettings);
            }
            if (ResourceFiles != null)
            {
                writer.WritePropertyName("resourceFiles");
                writer.WriteStartArray();
                foreach (var item in ResourceFiles)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (EnvironmentSettings != null)
            {
                writer.WritePropertyName("environmentSettings");
                writer.WriteStartArray();
                foreach (var item in EnvironmentSettings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (MaxWallClockTime != null)
            {
                writer.WritePropertyName("maxWallClockTime");
                writer.WriteStringValue(MaxWallClockTime.Value, "P");
            }
            if (RetentionTime != null)
            {
                writer.WritePropertyName("retentionTime");
                writer.WriteStringValue(RetentionTime.Value, "P");
            }
            if (UserIdentity != null)
            {
                writer.WritePropertyName("userIdentity");
                writer.WriteObjectValue(UserIdentity);
            }
            writer.WriteEndObject();
        }

        internal static JobReleaseTask DeserializeJobReleaseTask(JsonElement element)
        {
            string id = default;
            string commandLine = default;
            TaskContainerSettings containerSettings = default;
            IList<ResourceFile> resourceFiles = default;
            IList<EnvironmentSetting> environmentSettings = default;
            TimeSpan? maxWallClockTime = default;
            TimeSpan? retentionTime = default;
            UserIdentity userIdentity = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("commandLine"))
                {
                    commandLine = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("containerSettings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    containerSettings = TaskContainerSettings.DeserializeTaskContainerSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("resourceFiles"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResourceFile> array = new List<ResourceFile>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResourceFile.DeserializeResourceFile(item));
                    }
                    resourceFiles = array;
                    continue;
                }
                if (property.NameEquals("environmentSettings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EnvironmentSetting> array = new List<EnvironmentSetting>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EnvironmentSetting.DeserializeEnvironmentSetting(item));
                    }
                    environmentSettings = array;
                    continue;
                }
                if (property.NameEquals("maxWallClockTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxWallClockTime = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("retentionTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    retentionTime = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("userIdentity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    userIdentity = UserIdentity.DeserializeUserIdentity(property.Value);
                    continue;
                }
            }
            return new JobReleaseTask(id, commandLine, containerSettings, resourceFiles, environmentSettings, maxWallClockTime, retentionTime, userIdentity);
        }
    }
}
