// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.Batch.Models
{
    public partial class TaskConstraints : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (MaxWallClockTime != null)
            {
                writer.WritePropertyName("maxWallClockTime");
                writer.WriteStringValue(MaxWallClockTime.Value, "P");
            }
            if (RetentionTime != null)
            {
                writer.WritePropertyName("retentionTime");
                writer.WriteStringValue(RetentionTime.Value, "P");
            }
            if (MaxTaskRetryCount != null)
            {
                writer.WritePropertyName("maxTaskRetryCount");
                writer.WriteNumberValue(MaxTaskRetryCount.Value);
            }
            writer.WriteEndObject();
        }

        internal static TaskConstraints DeserializeTaskConstraints(JsonElement element)
        {
            TimeSpan? maxWallClockTime = default;
            TimeSpan? retentionTime = default;
            int? maxTaskRetryCount = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("maxWallClockTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxWallClockTime = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("retentionTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    retentionTime = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("maxTaskRetryCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxTaskRetryCount = property.Value.GetInt32();
                    continue;
                }
            }
            return new TaskConstraints(maxWallClockTime, retentionTime, maxTaskRetryCount);
        }
    }
}
