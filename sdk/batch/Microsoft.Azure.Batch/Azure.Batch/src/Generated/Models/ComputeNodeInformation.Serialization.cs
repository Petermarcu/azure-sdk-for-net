// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Batch.Models
{
    public partial class ComputeNodeInformation
    {
        internal static ComputeNodeInformation DeserializeComputeNodeInformation(JsonElement element)
        {
            string affinityId = default;
            string nodeUrl = default;
            string poolId = default;
            string nodeId = default;
            string taskRootDirectory = default;
            string taskRootDirectoryUrl = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("affinityId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    affinityId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nodeUrl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nodeUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("poolId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    poolId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nodeId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nodeId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("taskRootDirectory"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    taskRootDirectory = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("taskRootDirectoryUrl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    taskRootDirectoryUrl = property.Value.GetString();
                    continue;
                }
            }
            return new ComputeNodeInformation(affinityId, nodeUrl, poolId, nodeId, taskRootDirectory, taskRootDirectoryUrl);
        }
    }
}
