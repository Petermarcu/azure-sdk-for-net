// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.Batch.Models
{
    public partial class Schedule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (DoNotRunUntil != null)
            {
                writer.WritePropertyName("doNotRunUntil");
                writer.WriteStringValue(DoNotRunUntil.Value, "S");
            }
            if (DoNotRunAfter != null)
            {
                writer.WritePropertyName("doNotRunAfter");
                writer.WriteStringValue(DoNotRunAfter.Value, "S");
            }
            if (StartWindow != null)
            {
                writer.WritePropertyName("startWindow");
                writer.WriteStringValue(StartWindow.Value, "P");
            }
            if (RecurrenceInterval != null)
            {
                writer.WritePropertyName("recurrenceInterval");
                writer.WriteStringValue(RecurrenceInterval.Value, "P");
            }
            writer.WriteEndObject();
        }

        internal static Schedule DeserializeSchedule(JsonElement element)
        {
            DateTimeOffset? doNotRunUntil = default;
            DateTimeOffset? doNotRunAfter = default;
            TimeSpan? startWindow = default;
            TimeSpan? recurrenceInterval = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("doNotRunUntil"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    doNotRunUntil = property.Value.GetDateTimeOffset("S");
                    continue;
                }
                if (property.NameEquals("doNotRunAfter"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    doNotRunAfter = property.Value.GetDateTimeOffset("S");
                    continue;
                }
                if (property.NameEquals("startWindow"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startWindow = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("recurrenceInterval"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recurrenceInterval = property.Value.GetTimeSpan("P");
                    continue;
                }
            }
            return new Schedule(doNotRunUntil, doNotRunAfter, startWindow, recurrenceInterval);
        }
    }
}
