// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Batch.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Batch
{
    internal partial class AccountRestClient
    {
        private string batchUrl;
        private string apiVersion;
        private ClientDiagnostics clientDiagnostics;
        private HttpPipeline pipeline;

        /// <summary> Initializes a new instance of AccountRestClient. </summary>
        public AccountRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string batchUrl, string apiVersion = "2020-03-01.11.0")
        {
            if (batchUrl == null)
            {
                throw new ArgumentNullException(nameof(batchUrl));
            }
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }

            this.batchUrl = batchUrl;
            this.apiVersion = apiVersion;
            this.clientDiagnostics = clientDiagnostics;
            this.pipeline = pipeline;
        }

        internal HttpMessage CreateListSupportedImagesRequest(AccountListSupportedImagesOptions accountListSupportedImagesOptions)
        {
            var message = pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(batchUrl, false);
            uri.AppendPath("/supportedimages", false);
            if (accountListSupportedImagesOptions?.Filter != null)
            {
                uri.AppendQuery("$filter", accountListSupportedImagesOptions.Filter, true);
            }
            if (accountListSupportedImagesOptions?.MaxResults != null)
            {
                uri.AppendQuery("maxresults", accountListSupportedImagesOptions.MaxResults.Value, true);
            }
            if (accountListSupportedImagesOptions?.Timeout != null)
            {
                uri.AppendQuery("timeout", accountListSupportedImagesOptions.Timeout.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (accountListSupportedImagesOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", accountListSupportedImagesOptions.ClientRequestId.Value);
            }
            if (accountListSupportedImagesOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", accountListSupportedImagesOptions.ReturnClientRequestId.Value);
            }
            if (accountListSupportedImagesOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", accountListSupportedImagesOptions.OcpDate.Value, "R");
            }
            return message;
        }

        /// <summary> Lists all Virtual Machine Images supported by the Azure Batch service. </summary>
        /// <param name="accountListSupportedImagesOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<ResponseWithHeaders<AccountListSupportedImagesResult, ListSupportedImagesHeaders>> ListSupportedImagesAsync(AccountListSupportedImagesOptions accountListSupportedImagesOptions, CancellationToken cancellationToken = default)
        {
            using var scope = clientDiagnostics.CreateScope("AccountClient.ListSupportedImages");
            scope.Start();
            try
            {
                using var message = CreateListSupportedImagesRequest(accountListSupportedImagesOptions);
                await pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
                var headers = new ListSupportedImagesHeaders(message.Response);
                switch (message.Response.Status)
                {
                    case 200:
                        {
                            AccountListSupportedImagesResult value = default;
                            using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                            value = AccountListSupportedImagesResult.DeserializeAccountListSupportedImagesResult(document.RootElement);
                            return ResponseWithHeaders.FromValue(value, headers, message.Response);
                        }
                    default:
                        throw await clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all Virtual Machine Images supported by the Azure Batch service. </summary>
        /// <param name="accountListSupportedImagesOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<AccountListSupportedImagesResult, ListSupportedImagesHeaders> ListSupportedImages(AccountListSupportedImagesOptions accountListSupportedImagesOptions, CancellationToken cancellationToken = default)
        {
            using var scope = clientDiagnostics.CreateScope("AccountClient.ListSupportedImages");
            scope.Start();
            try
            {
                using var message = CreateListSupportedImagesRequest(accountListSupportedImagesOptions);
                pipeline.Send(message, cancellationToken);
                var headers = new ListSupportedImagesHeaders(message.Response);
                switch (message.Response.Status)
                {
                    case 200:
                        {
                            AccountListSupportedImagesResult value = default;
                            using var document = JsonDocument.Parse(message.Response.ContentStream);
                            value = AccountListSupportedImagesResult.DeserializeAccountListSupportedImagesResult(document.RootElement);
                            return ResponseWithHeaders.FromValue(value, headers, message.Response);
                        }
                    default:
                        throw clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateListPoolNodeCountsRequest(AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions)
        {
            var message = pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(batchUrl, false);
            uri.AppendPath("/nodecounts", false);
            if (accountListPoolNodeCountsOptions?.Filter != null)
            {
                uri.AppendQuery("$filter", accountListPoolNodeCountsOptions.Filter, true);
            }
            if (accountListPoolNodeCountsOptions?.MaxResults != null)
            {
                uri.AppendQuery("maxresults", accountListPoolNodeCountsOptions.MaxResults.Value, true);
            }
            if (accountListPoolNodeCountsOptions?.Timeout != null)
            {
                uri.AppendQuery("timeout", accountListPoolNodeCountsOptions.Timeout.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (accountListPoolNodeCountsOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", accountListPoolNodeCountsOptions.ClientRequestId.Value);
            }
            if (accountListPoolNodeCountsOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", accountListPoolNodeCountsOptions.ReturnClientRequestId.Value);
            }
            if (accountListPoolNodeCountsOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", accountListPoolNodeCountsOptions.OcpDate.Value, "R");
            }
            return message;
        }

        /// <summary> Gets the number of Compute Nodes in each state, grouped by Pool. </summary>
        /// <param name="accountListPoolNodeCountsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<ResponseWithHeaders<PoolNodeCountsListResult, ListPoolNodeCountsHeaders>> ListPoolNodeCountsAsync(AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions, CancellationToken cancellationToken = default)
        {
            using var scope = clientDiagnostics.CreateScope("AccountClient.ListPoolNodeCounts");
            scope.Start();
            try
            {
                using var message = CreateListPoolNodeCountsRequest(accountListPoolNodeCountsOptions);
                await pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
                var headers = new ListPoolNodeCountsHeaders(message.Response);
                switch (message.Response.Status)
                {
                    case 200:
                        {
                            PoolNodeCountsListResult value = default;
                            using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                            value = PoolNodeCountsListResult.DeserializePoolNodeCountsListResult(document.RootElement);
                            return ResponseWithHeaders.FromValue(value, headers, message.Response);
                        }
                    default:
                        throw await clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the number of Compute Nodes in each state, grouped by Pool. </summary>
        /// <param name="accountListPoolNodeCountsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<PoolNodeCountsListResult, ListPoolNodeCountsHeaders> ListPoolNodeCounts(AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions, CancellationToken cancellationToken = default)
        {
            using var scope = clientDiagnostics.CreateScope("AccountClient.ListPoolNodeCounts");
            scope.Start();
            try
            {
                using var message = CreateListPoolNodeCountsRequest(accountListPoolNodeCountsOptions);
                pipeline.Send(message, cancellationToken);
                var headers = new ListPoolNodeCountsHeaders(message.Response);
                switch (message.Response.Status)
                {
                    case 200:
                        {
                            PoolNodeCountsListResult value = default;
                            using var document = JsonDocument.Parse(message.Response.ContentStream);
                            value = PoolNodeCountsListResult.DeserializePoolNodeCountsListResult(document.RootElement);
                            return ResponseWithHeaders.FromValue(value, headers, message.Response);
                        }
                    default:
                        throw clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateListSupportedImagesNextPageRequest(string nextLink, AccountListSupportedImagesOptions accountListSupportedImagesOptions)
        {
            var message = pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(nextLink, false);
            request.Uri = uri;
            if (accountListSupportedImagesOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", accountListSupportedImagesOptions.ClientRequestId.Value);
            }
            if (accountListSupportedImagesOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", accountListSupportedImagesOptions.ReturnClientRequestId.Value);
            }
            if (accountListSupportedImagesOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", accountListSupportedImagesOptions.OcpDate.Value, "R");
            }
            return message;
        }

        /// <summary> Lists all Virtual Machine Images supported by the Azure Batch service. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="accountListSupportedImagesOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<ResponseWithHeaders<AccountListSupportedImagesResult, ListSupportedImagesHeaders>> ListSupportedImagesNextPageAsync(string nextLink, AccountListSupportedImagesOptions accountListSupportedImagesOptions, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var scope = clientDiagnostics.CreateScope("AccountClient.ListSupportedImages");
            scope.Start();
            try
            {
                using var message = CreateListSupportedImagesNextPageRequest(nextLink, accountListSupportedImagesOptions);
                await pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
                var headers = new ListSupportedImagesHeaders(message.Response);
                switch (message.Response.Status)
                {
                    case 200:
                        {
                            AccountListSupportedImagesResult value = default;
                            using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                            value = AccountListSupportedImagesResult.DeserializeAccountListSupportedImagesResult(document.RootElement);
                            return ResponseWithHeaders.FromValue(value, headers, message.Response);
                        }
                    default:
                        throw await clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all Virtual Machine Images supported by the Azure Batch service. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="accountListSupportedImagesOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<AccountListSupportedImagesResult, ListSupportedImagesHeaders> ListSupportedImagesNextPage(string nextLink, AccountListSupportedImagesOptions accountListSupportedImagesOptions, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var scope = clientDiagnostics.CreateScope("AccountClient.ListSupportedImages");
            scope.Start();
            try
            {
                using var message = CreateListSupportedImagesNextPageRequest(nextLink, accountListSupportedImagesOptions);
                pipeline.Send(message, cancellationToken);
                var headers = new ListSupportedImagesHeaders(message.Response);
                switch (message.Response.Status)
                {
                    case 200:
                        {
                            AccountListSupportedImagesResult value = default;
                            using var document = JsonDocument.Parse(message.Response.ContentStream);
                            value = AccountListSupportedImagesResult.DeserializeAccountListSupportedImagesResult(document.RootElement);
                            return ResponseWithHeaders.FromValue(value, headers, message.Response);
                        }
                    default:
                        throw clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateListPoolNodeCountsNextPageRequest(string nextLink, AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions)
        {
            var message = pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(nextLink, false);
            request.Uri = uri;
            if (accountListPoolNodeCountsOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", accountListPoolNodeCountsOptions.ClientRequestId.Value);
            }
            if (accountListPoolNodeCountsOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", accountListPoolNodeCountsOptions.ReturnClientRequestId.Value);
            }
            if (accountListPoolNodeCountsOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", accountListPoolNodeCountsOptions.OcpDate.Value, "R");
            }
            return message;
        }

        /// <summary> Gets the number of Compute Nodes in each state, grouped by Pool. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="accountListPoolNodeCountsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<ResponseWithHeaders<PoolNodeCountsListResult, ListPoolNodeCountsHeaders>> ListPoolNodeCountsNextPageAsync(string nextLink, AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var scope = clientDiagnostics.CreateScope("AccountClient.ListPoolNodeCounts");
            scope.Start();
            try
            {
                using var message = CreateListPoolNodeCountsNextPageRequest(nextLink, accountListPoolNodeCountsOptions);
                await pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
                var headers = new ListPoolNodeCountsHeaders(message.Response);
                switch (message.Response.Status)
                {
                    case 200:
                        {
                            PoolNodeCountsListResult value = default;
                            using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                            value = PoolNodeCountsListResult.DeserializePoolNodeCountsListResult(document.RootElement);
                            return ResponseWithHeaders.FromValue(value, headers, message.Response);
                        }
                    default:
                        throw await clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the number of Compute Nodes in each state, grouped by Pool. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="accountListPoolNodeCountsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<PoolNodeCountsListResult, ListPoolNodeCountsHeaders> ListPoolNodeCountsNextPage(string nextLink, AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var scope = clientDiagnostics.CreateScope("AccountClient.ListPoolNodeCounts");
            scope.Start();
            try
            {
                using var message = CreateListPoolNodeCountsNextPageRequest(nextLink, accountListPoolNodeCountsOptions);
                pipeline.Send(message, cancellationToken);
                var headers = new ListPoolNodeCountsHeaders(message.Response);
                switch (message.Response.Status)
                {
                    case 200:
                        {
                            PoolNodeCountsListResult value = default;
                            using var document = JsonDocument.Parse(message.Response.ContentStream);
                            value = PoolNodeCountsListResult.DeserializePoolNodeCountsListResult(document.RootElement);
                            return ResponseWithHeaders.FromValue(value, headers, message.Response);
                        }
                    default:
                        throw clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
