// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Batch.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Batch
{
    public partial class PoolClient
    {
        private readonly ClientDiagnostics clientDiagnostics;
        private readonly HttpPipeline pipeline;
        internal PoolRestClient RestClient { get; }
        /// <summary> Initializes a new instance of PoolClient for mocking. </summary>
        protected PoolClient()
        {
        }
        /// <summary> Initializes a new instance of PoolClient. </summary>
        internal PoolClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string batchUrl, string apiVersion = "2020-03-01.11.0")
        {
            RestClient = new PoolRestClient(clientDiagnostics, pipeline, batchUrl, apiVersion);
            this.clientDiagnostics = clientDiagnostics;
            this.pipeline = pipeline;
        }

        /// <summary> Statistics are aggregated across all Pools that have ever existed in the Account, from Account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes. </summary>
        /// <param name="poolGetAllLifetimeStatisticsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PoolStatistics>> GetAllLifetimeStatisticsAsync(PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAllLifetimeStatisticsAsync(poolGetAllLifetimeStatisticsOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Statistics are aggregated across all Pools that have ever existed in the Account, from Account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes. </summary>
        /// <param name="poolGetAllLifetimeStatisticsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PoolStatistics> GetAllLifetimeStatistics(PoolGetAllLifetimeStatisticsOptions poolGetAllLifetimeStatisticsOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.GetAllLifetimeStatistics(poolGetAllLifetimeStatisticsOptions, cancellationToken);
        }

        /// <summary> When naming Pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers. </summary>
        /// <param name="pool"> The Pool to be added. </param>
        /// <param name="poolAddOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.AddAsync(pool, poolAddOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> When naming Pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers. </summary>
        /// <param name="pool"> The Pool to be added. </param>
        /// <param name="poolAddOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Add(PoolAddParameter pool, PoolAddOptions poolAddOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Add(pool, poolAddOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> When you request that a Pool be deleted, the following actions occur: the Pool state is set to deleting; any ongoing resize operation on the Pool are stopped; the Batch service starts resizing the Pool to zero Compute Nodes; any Tasks running on existing Compute Nodes are terminated and requeued (as if a resize Pool operation had been requested with the default requeue option); finally, the Pool is removed from the system. Because running Tasks are requeued, the user can rerun these Tasks by updating their Job to target a different Pool. The Tasks can then run on the new Pool. If you want to override the requeue behavior, then you should call resize Pool explicitly to shrink the Pool to zero size before deleting the Pool. If you call an Update, Patch or Delete API on a Pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted. </summary>
        /// <param name="poolId"> The ID of the Pool to delete. </param>
        /// <param name="poolDeleteOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string poolId, PoolDeleteOptions poolDeleteOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.DeleteAsync(poolId, poolDeleteOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> When you request that a Pool be deleted, the following actions occur: the Pool state is set to deleting; any ongoing resize operation on the Pool are stopped; the Batch service starts resizing the Pool to zero Compute Nodes; any Tasks running on existing Compute Nodes are terminated and requeued (as if a resize Pool operation had been requested with the default requeue option); finally, the Pool is removed from the system. Because running Tasks are requeued, the user can rerun these Tasks by updating their Job to target a different Pool. The Tasks can then run on the new Pool. If you want to override the requeue behavior, then you should call resize Pool explicitly to shrink the Pool to zero size before deleting the Pool. If you call an Update, Patch or Delete API on a Pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted. </summary>
        /// <param name="poolId"> The ID of the Pool to delete. </param>
        /// <param name="poolDeleteOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string poolId, PoolDeleteOptions poolDeleteOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Delete(poolId, poolDeleteOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> Gets basic properties of a Pool. </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="poolExistsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> ExistsAsync(string poolId, PoolExistsOptions poolExistsOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.ExistsAsync(poolId, poolExistsOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> Gets basic properties of a Pool. </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="poolExistsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Exists(string poolId, PoolExistsOptions poolExistsOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Exists(poolId, poolExistsOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> Gets information about the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="poolGetOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CloudPool>> GetAsync(string poolId, PoolGetOptions poolGetOptions, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAsync(poolId, poolGetOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets information about the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="poolGetOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CloudPool> Get(string poolId, PoolGetOptions poolGetOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Get(poolId, poolGetOptions, cancellationToken);
        }

        /// <summary> This only replaces the Pool properties specified in the request. For example, if the Pool has a StartTask associated with it, and a request does not specify a StartTask element, then the Pool keeps the existing StartTask. </summary>
        /// <param name="poolId"> The ID of the Pool to update. </param>
        /// <param name="poolPatchParameter"> The parameters for the request. </param>
        /// <param name="poolPatchOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PatchAsync(string poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.PatchAsync(poolId, poolPatchParameter, poolPatchOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> This only replaces the Pool properties specified in the request. For example, if the Pool has a StartTask associated with it, and a request does not specify a StartTask element, then the Pool keeps the existing StartTask. </summary>
        /// <param name="poolId"> The ID of the Pool to update. </param>
        /// <param name="poolPatchParameter"> The parameters for the request. </param>
        /// <param name="poolPatchOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Patch(string poolId, PoolPatchParameter poolPatchParameter, PoolPatchOptions poolPatchOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Patch(poolId, poolPatchParameter, poolPatchOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> Disables automatic scaling for a Pool. </summary>
        /// <param name="poolId"> The ID of the Pool on which to disable automatic scaling. </param>
        /// <param name="poolDisableAutoScaleOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DisableAutoScaleAsync(string poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.DisableAutoScaleAsync(poolId, poolDisableAutoScaleOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> Disables automatic scaling for a Pool. </summary>
        /// <param name="poolId"> The ID of the Pool on which to disable automatic scaling. </param>
        /// <param name="poolDisableAutoScaleOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DisableAutoScale(string poolId, PoolDisableAutoScaleOptions poolDisableAutoScaleOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.DisableAutoScale(poolId, poolDisableAutoScaleOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> You cannot enable automatic scaling on a Pool if a resize operation is in progress on the Pool. If automatic scaling of the Pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the Pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same Pool more than once every 30 seconds. </summary>
        /// <param name="poolId"> The ID of the Pool on which to enable automatic scaling. </param>
        /// <param name="poolEnableAutoScaleParameter"> The parameters for the request. </param>
        /// <param name="poolEnableAutoScaleOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> EnableAutoScaleAsync(string poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.EnableAutoScaleAsync(poolId, poolEnableAutoScaleParameter, poolEnableAutoScaleOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> You cannot enable automatic scaling on a Pool if a resize operation is in progress on the Pool. If automatic scaling of the Pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the Pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same Pool more than once every 30 seconds. </summary>
        /// <param name="poolId"> The ID of the Pool on which to enable automatic scaling. </param>
        /// <param name="poolEnableAutoScaleParameter"> The parameters for the request. </param>
        /// <param name="poolEnableAutoScaleOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response EnableAutoScale(string poolId, PoolEnableAutoScaleParameter poolEnableAutoScaleParameter, PoolEnableAutoScaleOptions poolEnableAutoScaleOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.EnableAutoScale(poolId, poolEnableAutoScaleParameter, poolEnableAutoScaleOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> This API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the Pool. The Pool must have auto scaling enabled in order to evaluate a formula. </summary>
        /// <param name="poolId"> The ID of the Pool on which to evaluate the automatic scaling formula. </param>
        /// <param name="poolEvaluateAutoScaleParameter"> The parameters for the request. </param>
        /// <param name="poolEvaluateAutoScaleOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AutoScaleRun>> EvaluateAutoScaleAsync(string poolId, PoolEvaluateAutoScaleParameter poolEvaluateAutoScaleParameter, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions, CancellationToken cancellationToken = default)
        {
            return await RestClient.EvaluateAutoScaleAsync(poolId, poolEvaluateAutoScaleParameter, poolEvaluateAutoScaleOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> This API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the Pool. The Pool must have auto scaling enabled in order to evaluate a formula. </summary>
        /// <param name="poolId"> The ID of the Pool on which to evaluate the automatic scaling formula. </param>
        /// <param name="poolEvaluateAutoScaleParameter"> The parameters for the request. </param>
        /// <param name="poolEvaluateAutoScaleOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AutoScaleRun> EvaluateAutoScale(string poolId, PoolEvaluateAutoScaleParameter poolEvaluateAutoScaleParameter, PoolEvaluateAutoScaleOptions poolEvaluateAutoScaleOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.EvaluateAutoScale(poolId, poolEvaluateAutoScaleParameter, poolEvaluateAutoScaleOptions, cancellationToken);
        }

        /// <summary> You can only resize a Pool when its allocation state is steady. If the Pool is already resizing, the request fails with status code 409. When you resize a Pool, the Pool&apos;s allocation state changes from steady to resizing. You cannot resize Pools which are configured for automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize a Pool downwards, the Batch service chooses which Compute Nodes to remove. To remove specific Compute Nodes, use the Pool remove Compute Nodes API instead. </summary>
        /// <param name="poolId"> The ID of the Pool to resize. </param>
        /// <param name="poolResizeParameter"> The parameters for the request. </param>
        /// <param name="poolResizeOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> ResizeAsync(string poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.ResizeAsync(poolId, poolResizeParameter, poolResizeOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> You can only resize a Pool when its allocation state is steady. If the Pool is already resizing, the request fails with status code 409. When you resize a Pool, the Pool&apos;s allocation state changes from steady to resizing. You cannot resize Pools which are configured for automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize a Pool downwards, the Batch service chooses which Compute Nodes to remove. To remove specific Compute Nodes, use the Pool remove Compute Nodes API instead. </summary>
        /// <param name="poolId"> The ID of the Pool to resize. </param>
        /// <param name="poolResizeParameter"> The parameters for the request. </param>
        /// <param name="poolResizeOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Resize(string poolId, PoolResizeParameter poolResizeParameter, PoolResizeOptions poolResizeOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Resize(poolId, poolResizeParameter, poolResizeOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> This does not restore the Pool to its previous state before the resize operation: it only stops any further changes being made, and the Pool maintains its current state. After stopping, the Pool stabilizes at the number of Compute Nodes it was at when the stop operation was done. During the stop operation, the Pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize Pool request; this API can also be used to halt the initial sizing of the Pool when it is created. </summary>
        /// <param name="poolId"> The ID of the Pool whose resizing you want to stop. </param>
        /// <param name="poolStopResizeOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> StopResizeAsync(string poolId, PoolStopResizeOptions poolStopResizeOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.StopResizeAsync(poolId, poolStopResizeOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> This does not restore the Pool to its previous state before the resize operation: it only stops any further changes being made, and the Pool maintains its current state. After stopping, the Pool stabilizes at the number of Compute Nodes it was at when the stop operation was done. During the stop operation, the Pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize Pool request; this API can also be used to halt the initial sizing of the Pool when it is created. </summary>
        /// <param name="poolId"> The ID of the Pool whose resizing you want to stop. </param>
        /// <param name="poolStopResizeOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response StopResize(string poolId, PoolStopResizeOptions poolStopResizeOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.StopResize(poolId, poolStopResizeOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> This fully replaces all the updatable properties of the Pool. For example, if the Pool has a StartTask associated with it and if StartTask is not specified with this request, then the Batch service will remove the existing StartTask. </summary>
        /// <param name="poolId"> The ID of the Pool to update. </param>
        /// <param name="poolUpdatePropertiesParameter"> The parameters for the request. </param>
        /// <param name="poolUpdatePropertiesOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdatePropertiesAsync(string poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.UpdatePropertiesAsync(poolId, poolUpdatePropertiesParameter, poolUpdatePropertiesOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> This fully replaces all the updatable properties of the Pool. For example, if the Pool has a StartTask associated with it and if StartTask is not specified with this request, then the Batch service will remove the existing StartTask. </summary>
        /// <param name="poolId"> The ID of the Pool to update. </param>
        /// <param name="poolUpdatePropertiesParameter"> The parameters for the request. </param>
        /// <param name="poolUpdatePropertiesOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateProperties(string poolId, PoolUpdatePropertiesParameter poolUpdatePropertiesParameter, PoolUpdatePropertiesOptions poolUpdatePropertiesOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.UpdateProperties(poolId, poolUpdatePropertiesParameter, poolUpdatePropertiesOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> This operation can only run when the allocation state of the Pool is steady. When this operation runs, the allocation state changes from steady to resizing. </summary>
        /// <param name="poolId"> The ID of the Pool from which you want to remove Compute Nodes. </param>
        /// <param name="nodeRemoveParameter"> The parameters for the request. </param>
        /// <param name="poolRemoveNodesOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RemoveNodesAsync(string poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.RemoveNodesAsync(poolId, nodeRemoveParameter, poolRemoveNodesOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> This operation can only run when the allocation state of the Pool is steady. When this operation runs, the allocation state changes from steady to resizing. </summary>
        /// <param name="poolId"> The ID of the Pool from which you want to remove Compute Nodes. </param>
        /// <param name="nodeRemoveParameter"> The parameters for the request. </param>
        /// <param name="poolRemoveNodesOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RemoveNodes(string poolId, NodeRemoveParameter nodeRemoveParameter, PoolRemoveNodesOptions poolRemoveNodesOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.RemoveNodes(poolId, nodeRemoveParameter, poolRemoveNodesOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> If you do not specify a $filter clause including a poolId, the response includes all Pools that existed in the Account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned. </summary>
        /// <param name="poolListUsageMetricsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<PoolUsageMetrics> ListUsageMetricsAsync(PoolListUsageMetricsOptions poolListUsageMetricsOptions, CancellationToken cancellationToken = default)
        {
            async Task<Page<PoolUsageMetrics>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListUsageMetricsAsync(poolListUsageMetricsOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<PoolUsageMetrics>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListUsageMetricsNextPageAsync(nextLink, poolListUsageMetricsOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> If you do not specify a $filter clause including a poolId, the response includes all Pools that existed in the Account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned. </summary>
        /// <param name="poolListUsageMetricsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<PoolUsageMetrics> ListUsageMetrics(PoolListUsageMetricsOptions poolListUsageMetricsOptions, CancellationToken cancellationToken = default)
        {
            Page<PoolUsageMetrics> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListUsageMetrics(poolListUsageMetricsOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<PoolUsageMetrics> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListUsageMetricsNextPage(nextLink, poolListUsageMetricsOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all of the Pools in the specified Account. </summary>
        /// <param name="poolListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<CloudPool> ListAsync(PoolListOptions poolListOptions, CancellationToken cancellationToken = default)
        {
            async Task<Page<CloudPool>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListAsync(poolListOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<CloudPool>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextPageAsync(nextLink, poolListOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all of the Pools in the specified Account. </summary>
        /// <param name="poolListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<CloudPool> List(PoolListOptions poolListOptions, CancellationToken cancellationToken = default)
        {
            Page<CloudPool> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.List(poolListOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<CloudPool> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNextPage(nextLink, poolListOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
