// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Batch.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Batch
{
    public partial class FileClient
    {
        private readonly ClientDiagnostics clientDiagnostics;
        private readonly HttpPipeline pipeline;
        internal FileRestClient RestClient { get; }
        /// <summary> Initializes a new instance of FileClient for mocking. </summary>
        protected FileClient()
        {
        }
        /// <summary> Initializes a new instance of FileClient. </summary>
        internal FileClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string batchUrl, string apiVersion = "2020-03-01.11.0")
        {
            RestClient = new FileRestClient(clientDiagnostics, pipeline, batchUrl, apiVersion);
            this.clientDiagnostics = clientDiagnostics;
            this.pipeline = pipeline;
        }

        /// <summary> Deletes the specified Task file from the Compute Node where the Task ran. </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose file you want to delete. </param>
        /// <param name="filePath"> The path to the Task file or directory that you want to delete. </param>
        /// <param name="recursive"> Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </param>
        /// <param name="fileDeleteFromTaskOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteFromTaskAsync(string jobId, string taskId, string filePath, bool? recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.DeleteFromTaskAsync(jobId, taskId, filePath, recursive, fileDeleteFromTaskOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> Deletes the specified Task file from the Compute Node where the Task ran. </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose file you want to delete. </param>
        /// <param name="filePath"> The path to the Task file or directory that you want to delete. </param>
        /// <param name="recursive"> Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </param>
        /// <param name="fileDeleteFromTaskOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteFromTask(string jobId, string taskId, string filePath, bool? recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.DeleteFromTask(jobId, taskId, filePath, recursive, fileDeleteFromTaskOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> Returns the content of the specified Task file. </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        /// <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        /// <param name="fileGetFromTaskOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Stream>> GetFromTaskAsync(string jobId, string taskId, string filePath, FileGetFromTaskOptions fileGetFromTaskOptions, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetFromTaskAsync(jobId, taskId, filePath, fileGetFromTaskOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Returns the content of the specified Task file. </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        /// <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        /// <param name="fileGetFromTaskOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Stream> GetFromTask(string jobId, string taskId, string filePath, FileGetFromTaskOptions fileGetFromTaskOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.GetFromTask(jobId, taskId, filePath, fileGetFromTaskOptions, cancellationToken);
        }

        /// <summary> Gets the properties of the specified Task file. </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose file you want to get the properties of. </param>
        /// <param name="filePath"> The path to the Task file that you want to get the properties of. </param>
        /// <param name="fileGetPropertiesFromTaskOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetPropertiesFromTaskAsync(string jobId, string taskId, string filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.GetPropertiesFromTaskAsync(jobId, taskId, filePath, fileGetPropertiesFromTaskOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> Gets the properties of the specified Task file. </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose file you want to get the properties of. </param>
        /// <param name="filePath"> The path to the Task file that you want to get the properties of. </param>
        /// <param name="fileGetPropertiesFromTaskOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetPropertiesFromTask(string jobId, string taskId, string filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.GetPropertiesFromTask(jobId, taskId, filePath, fileGetPropertiesFromTaskOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> Deletes the specified file from the Compute Node. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node from which you want to delete the file. </param>
        /// <param name="filePath"> The path to the file or directory that you want to delete. </param>
        /// <param name="recursive"> Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </param>
        /// <param name="fileDeleteFromComputeNodeOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteFromComputeNodeAsync(string poolId, string nodeId, string filePath, bool? recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.DeleteFromComputeNodeAsync(poolId, nodeId, filePath, recursive, fileDeleteFromComputeNodeOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> Deletes the specified file from the Compute Node. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node from which you want to delete the file. </param>
        /// <param name="filePath"> The path to the file or directory that you want to delete. </param>
        /// <param name="recursive"> Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </param>
        /// <param name="fileDeleteFromComputeNodeOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteFromComputeNode(string poolId, string nodeId, string filePath, bool? recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.DeleteFromComputeNode(poolId, nodeId, filePath, recursive, fileDeleteFromComputeNodeOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> Returns the content of the specified Compute Node file. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that contains the file. </param>
        /// <param name="filePath"> The path to the Compute Node file that you want to get the content of. </param>
        /// <param name="fileGetFromComputeNodeOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Stream>> GetFromComputeNodeAsync(string poolId, string nodeId, string filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetFromComputeNodeAsync(poolId, nodeId, filePath, fileGetFromComputeNodeOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Returns the content of the specified Compute Node file. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that contains the file. </param>
        /// <param name="filePath"> The path to the Compute Node file that you want to get the content of. </param>
        /// <param name="fileGetFromComputeNodeOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Stream> GetFromComputeNode(string poolId, string nodeId, string filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.GetFromComputeNode(poolId, nodeId, filePath, fileGetFromComputeNodeOptions, cancellationToken);
        }

        /// <summary> Gets the properties of the specified Compute Node file. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that contains the file. </param>
        /// <param name="filePath"> The path to the Compute Node file that you want to get the properties of. </param>
        /// <param name="fileGetPropertiesFromComputeNodeOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetPropertiesFromComputeNodeAsync(string poolId, string nodeId, string filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.GetPropertiesFromComputeNodeAsync(poolId, nodeId, filePath, fileGetPropertiesFromComputeNodeOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> Gets the properties of the specified Compute Node file. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that contains the file. </param>
        /// <param name="filePath"> The path to the Compute Node file that you want to get the properties of. </param>
        /// <param name="fileGetPropertiesFromComputeNodeOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetPropertiesFromComputeNode(string poolId, string nodeId, string filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.GetPropertiesFromComputeNode(poolId, nodeId, filePath, fileGetPropertiesFromComputeNodeOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> Lists the files in a Task&apos;s directory on its Compute Node. </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose files you want to list. </param>
        /// <param name="recursive"> Whether to list children of the Task directory. This parameter can be used in combination with the filter parameter to list specific type of files. </param>
        /// <param name="fileListFromTaskOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<NodeFile> ListFromTaskAsync(string jobId, string taskId, bool? recursive, FileListFromTaskOptions fileListFromTaskOptions, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }

            async Task<Page<NodeFile>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListFromTaskAsync(jobId, taskId, recursive, fileListFromTaskOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<NodeFile>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListFromTaskNextPageAsync(nextLink, jobId, taskId, recursive, fileListFromTaskOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists the files in a Task&apos;s directory on its Compute Node. </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose files you want to list. </param>
        /// <param name="recursive"> Whether to list children of the Task directory. This parameter can be used in combination with the filter parameter to list specific type of files. </param>
        /// <param name="fileListFromTaskOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<NodeFile> ListFromTask(string jobId, string taskId, bool? recursive, FileListFromTaskOptions fileListFromTaskOptions, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }

            Page<NodeFile> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListFromTask(jobId, taskId, recursive, fileListFromTaskOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<NodeFile> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListFromTaskNextPage(nextLink, jobId, taskId, recursive, fileListFromTaskOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all of the files in Task directories on the specified Compute Node. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node whose files you want to list. </param>
        /// <param name="recursive"> Whether to list children of a directory. </param>
        /// <param name="fileListFromComputeNodeOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<NodeFile> ListFromComputeNodeAsync(string poolId, string nodeId, bool? recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions, CancellationToken cancellationToken = default)
        {
            if (poolId == null)
            {
                throw new ArgumentNullException(nameof(poolId));
            }
            if (nodeId == null)
            {
                throw new ArgumentNullException(nameof(nodeId));
            }

            async Task<Page<NodeFile>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListFromComputeNodeAsync(poolId, nodeId, recursive, fileListFromComputeNodeOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<NodeFile>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListFromComputeNodeNextPageAsync(nextLink, poolId, nodeId, recursive, fileListFromComputeNodeOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all of the files in Task directories on the specified Compute Node. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node whose files you want to list. </param>
        /// <param name="recursive"> Whether to list children of a directory. </param>
        /// <param name="fileListFromComputeNodeOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<NodeFile> ListFromComputeNode(string poolId, string nodeId, bool? recursive, FileListFromComputeNodeOptions fileListFromComputeNodeOptions, CancellationToken cancellationToken = default)
        {
            if (poolId == null)
            {
                throw new ArgumentNullException(nameof(poolId));
            }
            if (nodeId == null)
            {
                throw new ArgumentNullException(nameof(nodeId));
            }

            Page<NodeFile> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListFromComputeNode(poolId, nodeId, recursive, fileListFromComputeNodeOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<NodeFile> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListFromComputeNodeNextPage(nextLink, poolId, nodeId, recursive, fileListFromComputeNodeOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
