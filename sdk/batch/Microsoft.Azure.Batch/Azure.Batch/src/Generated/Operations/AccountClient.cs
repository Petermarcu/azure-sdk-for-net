// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Batch.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Batch
{
    public partial class AccountClient
    {
        private readonly ClientDiagnostics clientDiagnostics;
        private readonly HttpPipeline pipeline;
        internal AccountRestClient RestClient { get; }
        /// <summary> Initializes a new instance of AccountClient for mocking. </summary>
        protected AccountClient()
        {
        }
        /// <summary> Initializes a new instance of AccountClient. </summary>
        internal AccountClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string batchUrl, string apiVersion = "2020-03-01.11.0")
        {
            RestClient = new AccountRestClient(clientDiagnostics, pipeline, batchUrl, apiVersion);
            this.clientDiagnostics = clientDiagnostics;
            this.pipeline = pipeline;
        }

        /// <summary> Lists all Virtual Machine Images supported by the Azure Batch service. </summary>
        /// <param name="accountListSupportedImagesOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ImageInformation> ListSupportedImagesAsync(AccountListSupportedImagesOptions accountListSupportedImagesOptions, CancellationToken cancellationToken = default)
        {
            async Task<Page<ImageInformation>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListSupportedImagesAsync(accountListSupportedImagesOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<ImageInformation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListSupportedImagesNextPageAsync(nextLink, accountListSupportedImagesOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all Virtual Machine Images supported by the Azure Batch service. </summary>
        /// <param name="accountListSupportedImagesOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ImageInformation> ListSupportedImages(AccountListSupportedImagesOptions accountListSupportedImagesOptions, CancellationToken cancellationToken = default)
        {
            Page<ImageInformation> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListSupportedImages(accountListSupportedImagesOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<ImageInformation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListSupportedImagesNextPage(nextLink, accountListSupportedImagesOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets the number of Compute Nodes in each state, grouped by Pool. </summary>
        /// <param name="accountListPoolNodeCountsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<PoolNodeCounts> ListPoolNodeCountsAsync(AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions, CancellationToken cancellationToken = default)
        {
            async Task<Page<PoolNodeCounts>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListPoolNodeCountsAsync(accountListPoolNodeCountsOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<PoolNodeCounts>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListPoolNodeCountsNextPageAsync(nextLink, accountListPoolNodeCountsOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets the number of Compute Nodes in each state, grouped by Pool. </summary>
        /// <param name="accountListPoolNodeCountsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<PoolNodeCounts> ListPoolNodeCounts(AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions, CancellationToken cancellationToken = default)
        {
            Page<PoolNodeCounts> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListPoolNodeCounts(accountListPoolNodeCountsOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<PoolNodeCounts> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListPoolNodeCountsNextPage(nextLink, accountListPoolNodeCountsOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
