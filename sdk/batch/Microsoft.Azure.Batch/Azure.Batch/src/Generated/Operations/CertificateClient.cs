// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Batch.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Batch
{
    public partial class CertificateClient
    {
        private readonly ClientDiagnostics clientDiagnostics;
        private readonly HttpPipeline pipeline;
        internal CertificateRestClient RestClient { get; }
        /// <summary> Initializes a new instance of CertificateClient for mocking. </summary>
        protected CertificateClient()
        {
        }
        /// <summary> Initializes a new instance of CertificateClient. </summary>
        internal CertificateClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string batchUrl, string apiVersion = "2020-03-01.11.0")
        {
            RestClient = new CertificateRestClient(clientDiagnostics, pipeline, batchUrl, apiVersion);
            this.clientDiagnostics = clientDiagnostics;
            this.pipeline = pipeline;
        }

        /// <summary> Adds a Certificate to the specified Account. </summary>
        /// <param name="certificate"> The Certificate to be added. </param>
        /// <param name="certificateAddOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddAsync(CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.AddAsync(certificate, certificateAddOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> Adds a Certificate to the specified Account. </summary>
        /// <param name="certificate"> The Certificate to be added. </param>
        /// <param name="certificateAddOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Add(CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Add(certificate, certificateAddOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> If you try to delete a Certificate that is being used by a Pool or Compute Node, the status of the Certificate changes to deleteFailed. If you decide that you want to continue using the Certificate, you can use this operation to set the status of the Certificate back to active. If you intend to delete the Certificate, you do not need to run this operation after the deletion failed. You must make sure that the Certificate is not being used by any resources, and then you can try again to delete the Certificate. </summary>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        /// <param name="thumbprint"> The thumbprint of the Certificate being deleted. </param>
        /// <param name="certificateCancelDeletionOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CancelDeletionAsync(string thumbprintAlgorithm, string thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.CancelDeletionAsync(thumbprintAlgorithm, thumbprint, certificateCancelDeletionOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> If you try to delete a Certificate that is being used by a Pool or Compute Node, the status of the Certificate changes to deleteFailed. If you decide that you want to continue using the Certificate, you can use this operation to set the status of the Certificate back to active. If you intend to delete the Certificate, you do not need to run this operation after the deletion failed. You must make sure that the Certificate is not being used by any resources, and then you can try again to delete the Certificate. </summary>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        /// <param name="thumbprint"> The thumbprint of the Certificate being deleted. </param>
        /// <param name="certificateCancelDeletionOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CancelDeletion(string thumbprintAlgorithm, string thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.CancelDeletion(thumbprintAlgorithm, thumbprint, certificateCancelDeletionOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> You cannot delete a Certificate if a resource (Pool or Compute Node) is using it. Before you can delete a Certificate, you must therefore make sure that the Certificate is not associated with any existing Pools, the Certificate is not installed on any Nodes (even if you remove a Certificate from a Pool, it is not removed from existing Compute Nodes in that Pool until they restart), and no running Tasks depend on the Certificate. If you try to delete a Certificate that is in use, the deletion fails. The Certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the Certificate. </summary>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        /// <param name="thumbprint"> The thumbprint of the Certificate to be deleted. </param>
        /// <param name="certificateDeleteOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string thumbprintAlgorithm, string thumbprint, CertificateDeleteOptions certificateDeleteOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.DeleteAsync(thumbprintAlgorithm, thumbprint, certificateDeleteOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> You cannot delete a Certificate if a resource (Pool or Compute Node) is using it. Before you can delete a Certificate, you must therefore make sure that the Certificate is not associated with any existing Pools, the Certificate is not installed on any Nodes (even if you remove a Certificate from a Pool, it is not removed from existing Compute Nodes in that Pool until they restart), and no running Tasks depend on the Certificate. If you try to delete a Certificate that is in use, the deletion fails. The Certificate status changes to deleteFailed. You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue using the Certificate. </summary>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        /// <param name="thumbprint"> The thumbprint of the Certificate to be deleted. </param>
        /// <param name="certificateDeleteOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string thumbprintAlgorithm, string thumbprint, CertificateDeleteOptions certificateDeleteOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Delete(thumbprintAlgorithm, thumbprint, certificateDeleteOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> Gets information about the specified Certificate. </summary>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        /// <param name="thumbprint"> The thumbprint of the Certificate to get. </param>
        /// <param name="certificateGetOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Certificate>> GetAsync(string thumbprintAlgorithm, string thumbprint, CertificateGetOptions certificateGetOptions, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAsync(thumbprintAlgorithm, thumbprint, certificateGetOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets information about the specified Certificate. </summary>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        /// <param name="thumbprint"> The thumbprint of the Certificate to get. </param>
        /// <param name="certificateGetOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Certificate> Get(string thumbprintAlgorithm, string thumbprint, CertificateGetOptions certificateGetOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Get(thumbprintAlgorithm, thumbprint, certificateGetOptions, cancellationToken);
        }

        /// <summary> Lists all of the Certificates that have been added to the specified Account. </summary>
        /// <param name="certificateListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Certificate> ListAsync(CertificateListOptions certificateListOptions, CancellationToken cancellationToken = default)
        {
            async Task<Page<Certificate>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListAsync(certificateListOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<Certificate>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextPageAsync(nextLink, certificateListOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all of the Certificates that have been added to the specified Account. </summary>
        /// <param name="certificateListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Certificate> List(CertificateListOptions certificateListOptions, CancellationToken cancellationToken = default)
        {
            Page<Certificate> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.List(certificateListOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<Certificate> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNextPage(nextLink, certificateListOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
