// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Batch.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Batch
{
    internal partial class ApplicationRestClient
    {
        private string batchUrl;
        private string apiVersion;
        private ClientDiagnostics clientDiagnostics;
        private HttpPipeline pipeline;

        /// <summary> Initializes a new instance of ApplicationRestClient. </summary>
        public ApplicationRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string batchUrl, string apiVersion = "2020-03-01.11.0")
        {
            if (batchUrl == null)
            {
                throw new ArgumentNullException(nameof(batchUrl));
            }
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }

            this.batchUrl = batchUrl;
            this.apiVersion = apiVersion;
            this.clientDiagnostics = clientDiagnostics;
            this.pipeline = pipeline;
        }

        internal HttpMessage CreateListRequest(ApplicationListOptions applicationListOptions)
        {
            var message = pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(batchUrl, false);
            uri.AppendPath("/applications", false);
            if (applicationListOptions?.MaxResults != null)
            {
                uri.AppendQuery("maxresults", applicationListOptions.MaxResults.Value, true);
            }
            if (applicationListOptions?.Timeout != null)
            {
                uri.AppendQuery("timeout", applicationListOptions.Timeout.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (applicationListOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", applicationListOptions.ClientRequestId.Value);
            }
            if (applicationListOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", applicationListOptions.ReturnClientRequestId.Value);
            }
            if (applicationListOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", applicationListOptions.OcpDate.Value, "R");
            }
            return message;
        }

        /// <summary> This operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API. </summary>
        /// <param name="applicationListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<ResponseWithHeaders<ApplicationListResult, ListHeaders>> ListAsync(ApplicationListOptions applicationListOptions, CancellationToken cancellationToken = default)
        {
            using var scope = clientDiagnostics.CreateScope("ApplicationClient.List");
            scope.Start();
            try
            {
                using var message = CreateListRequest(applicationListOptions);
                await pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
                var headers = new ListHeaders(message.Response);
                switch (message.Response.Status)
                {
                    case 200:
                        {
                            ApplicationListResult value = default;
                            using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                            value = ApplicationListResult.DeserializeApplicationListResult(document.RootElement);
                            return ResponseWithHeaders.FromValue(value, headers, message.Response);
                        }
                    default:
                        throw await clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API. </summary>
        /// <param name="applicationListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<ApplicationListResult, ListHeaders> List(ApplicationListOptions applicationListOptions, CancellationToken cancellationToken = default)
        {
            using var scope = clientDiagnostics.CreateScope("ApplicationClient.List");
            scope.Start();
            try
            {
                using var message = CreateListRequest(applicationListOptions);
                pipeline.Send(message, cancellationToken);
                var headers = new ListHeaders(message.Response);
                switch (message.Response.Status)
                {
                    case 200:
                        {
                            ApplicationListResult value = default;
                            using var document = JsonDocument.Parse(message.Response.ContentStream);
                            value = ApplicationListResult.DeserializeApplicationListResult(document.RootElement);
                            return ResponseWithHeaders.FromValue(value, headers, message.Response);
                        }
                    default:
                        throw clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetRequest(string applicationId, ApplicationGetOptions applicationGetOptions)
        {
            var message = pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(batchUrl, false);
            uri.AppendPath("/applications/", false);
            uri.AppendPath(applicationId, true);
            if (applicationGetOptions?.Timeout != null)
            {
                uri.AppendQuery("timeout", applicationGetOptions.Timeout.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (applicationGetOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", applicationGetOptions.ClientRequestId.Value);
            }
            if (applicationGetOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", applicationGetOptions.ReturnClientRequestId.Value);
            }
            if (applicationGetOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", applicationGetOptions.OcpDate.Value, "R");
            }
            return message;
        }

        /// <summary> This operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about Applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API. </summary>
        /// <param name="applicationId"> The ID of the Application. </param>
        /// <param name="applicationGetOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<ResponseWithHeaders<ApplicationSummary, GetHeaders>> GetAsync(string applicationId, ApplicationGetOptions applicationGetOptions, CancellationToken cancellationToken = default)
        {
            if (applicationId == null)
            {
                throw new ArgumentNullException(nameof(applicationId));
            }

            using var scope = clientDiagnostics.CreateScope("ApplicationClient.Get");
            scope.Start();
            try
            {
                using var message = CreateGetRequest(applicationId, applicationGetOptions);
                await pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
                var headers = new GetHeaders(message.Response);
                switch (message.Response.Status)
                {
                    case 200:
                        {
                            ApplicationSummary value = default;
                            using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                            value = ApplicationSummary.DeserializeApplicationSummary(document.RootElement);
                            return ResponseWithHeaders.FromValue(value, headers, message.Response);
                        }
                    default:
                        throw await clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about Applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API. </summary>
        /// <param name="applicationId"> The ID of the Application. </param>
        /// <param name="applicationGetOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<ApplicationSummary, GetHeaders> Get(string applicationId, ApplicationGetOptions applicationGetOptions, CancellationToken cancellationToken = default)
        {
            if (applicationId == null)
            {
                throw new ArgumentNullException(nameof(applicationId));
            }

            using var scope = clientDiagnostics.CreateScope("ApplicationClient.Get");
            scope.Start();
            try
            {
                using var message = CreateGetRequest(applicationId, applicationGetOptions);
                pipeline.Send(message, cancellationToken);
                var headers = new GetHeaders(message.Response);
                switch (message.Response.Status)
                {
                    case 200:
                        {
                            ApplicationSummary value = default;
                            using var document = JsonDocument.Parse(message.Response.ContentStream);
                            value = ApplicationSummary.DeserializeApplicationSummary(document.RootElement);
                            return ResponseWithHeaders.FromValue(value, headers, message.Response);
                        }
                    default:
                        throw clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateListNextPageRequest(string nextLink, ApplicationListOptions applicationListOptions)
        {
            var message = pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(nextLink, false);
            request.Uri = uri;
            if (applicationListOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", applicationListOptions.ClientRequestId.Value);
            }
            if (applicationListOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", applicationListOptions.ReturnClientRequestId.Value);
            }
            if (applicationListOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", applicationListOptions.OcpDate.Value, "R");
            }
            return message;
        }

        /// <summary> This operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="applicationListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<ResponseWithHeaders<ApplicationListResult, ListHeaders>> ListNextPageAsync(string nextLink, ApplicationListOptions applicationListOptions, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var scope = clientDiagnostics.CreateScope("ApplicationClient.List");
            scope.Start();
            try
            {
                using var message = CreateListNextPageRequest(nextLink, applicationListOptions);
                await pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
                var headers = new ListHeaders(message.Response);
                switch (message.Response.Status)
                {
                    case 200:
                        {
                            ApplicationListResult value = default;
                            using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                            value = ApplicationListResult.DeserializeApplicationListResult(document.RootElement);
                            return ResponseWithHeaders.FromValue(value, headers, message.Response);
                        }
                    default:
                        throw await clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="applicationListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<ApplicationListResult, ListHeaders> ListNextPage(string nextLink, ApplicationListOptions applicationListOptions, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var scope = clientDiagnostics.CreateScope("ApplicationClient.List");
            scope.Start();
            try
            {
                using var message = CreateListNextPageRequest(nextLink, applicationListOptions);
                pipeline.Send(message, cancellationToken);
                var headers = new ListHeaders(message.Response);
                switch (message.Response.Status)
                {
                    case 200:
                        {
                            ApplicationListResult value = default;
                            using var document = JsonDocument.Parse(message.Response.ContentStream);
                            value = ApplicationListResult.DeserializeApplicationListResult(document.RootElement);
                            return ResponseWithHeaders.FromValue(value, headers, message.Response);
                        }
                    default:
                        throw clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
