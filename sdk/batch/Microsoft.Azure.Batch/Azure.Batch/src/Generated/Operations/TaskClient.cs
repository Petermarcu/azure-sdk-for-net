// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Batch.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Batch
{
    public partial class TaskClient
    {
        private readonly ClientDiagnostics clientDiagnostics;
        private readonly HttpPipeline pipeline;
        internal TaskRestClient RestClient { get; }
        /// <summary> Initializes a new instance of TaskClient for mocking. </summary>
        protected TaskClient()
        {
        }
        /// <summary> Initializes a new instance of TaskClient. </summary>
        internal TaskClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string batchUrl, string apiVersion = "2020-03-01.11.0")
        {
            RestClient = new TaskRestClient(clientDiagnostics, pipeline, batchUrl, apiVersion);
            this.clientDiagnostics = clientDiagnostics;
            this.pipeline = pipeline;
        }

        /// <summary> The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time. </summary>
        /// <param name="jobId"> The ID of the Job to which the Task is to be added. </param>
        /// <param name="task"> The Task to be added. </param>
        /// <param name="taskAddOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddAsync(string jobId, TaskAddParameter task, TaskAddOptions taskAddOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.AddAsync(jobId, task, taskAddOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time. </summary>
        /// <param name="jobId"> The ID of the Job to which the Task is to be added. </param>
        /// <param name="task"> The Task to be added. </param>
        /// <param name="taskAddOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Add(string jobId, TaskAddParameter task, TaskAddOptions taskAddOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Add(jobId, task, taskAddOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time. </summary>
        /// <param name="jobId"> The ID of the Job to which the Task collection is to be added. </param>
        /// <param name="taskCollection"> The Tasks to be added. </param>
        /// <param name="taskAddCollectionOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TaskAddCollectionResult>> AddCollectionAsync(string jobId, TaskAddCollectionParameter taskCollection, TaskAddCollectionOptions taskAddCollectionOptions, CancellationToken cancellationToken = default)
        {
            return await RestClient.AddCollectionAsync(jobId, taskCollection, taskAddCollectionOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time. </summary>
        /// <param name="jobId"> The ID of the Job to which the Task collection is to be added. </param>
        /// <param name="taskCollection"> The Tasks to be added. </param>
        /// <param name="taskAddCollectionOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TaskAddCollectionResult> AddCollection(string jobId, TaskAddCollectionParameter taskCollection, TaskAddCollectionOptions taskAddCollectionOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.AddCollection(jobId, taskCollection, taskAddCollectionOptions, cancellationToken);
        }

        /// <summary> When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background. </summary>
        /// <param name="jobId"> The ID of the Job from which to delete the Task. </param>
        /// <param name="taskId"> The ID of the Task to delete. </param>
        /// <param name="taskDeleteOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string jobId, string taskId, TaskDeleteOptions taskDeleteOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.DeleteAsync(jobId, taskId, taskDeleteOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background. </summary>
        /// <param name="jobId"> The ID of the Job from which to delete the Task. </param>
        /// <param name="taskId"> The ID of the Task to delete. </param>
        /// <param name="taskDeleteOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string jobId, string taskId, TaskDeleteOptions taskDeleteOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Delete(jobId, taskId, taskDeleteOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks. </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task to get information about. </param>
        /// <param name="taskGetOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CloudTask>> GetAsync(string jobId, string taskId, TaskGetOptions taskGetOptions, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAsync(jobId, taskId, taskGetOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks. </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task to get information about. </param>
        /// <param name="taskGetOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CloudTask> Get(string jobId, string taskId, TaskGetOptions taskGetOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Get(jobId, taskId, taskGetOptions, cancellationToken);
        }

        /// <summary> Updates the properties of the specified Task. </summary>
        /// <param name="jobId"> The ID of the Job containing the Task. </param>
        /// <param name="taskId"> The ID of the Task to update. </param>
        /// <param name="taskUpdateParameter"> The parameters for the request. </param>
        /// <param name="taskUpdateOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateAsync(string jobId, string taskId, TaskUpdateParameter taskUpdateParameter, TaskUpdateOptions taskUpdateOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.UpdateAsync(jobId, taskId, taskUpdateParameter, taskUpdateOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> Updates the properties of the specified Task. </summary>
        /// <param name="jobId"> The ID of the Job containing the Task. </param>
        /// <param name="taskId"> The ID of the Task to update. </param>
        /// <param name="taskUpdateParameter"> The parameters for the request. </param>
        /// <param name="taskUpdateOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Update(string jobId, string taskId, TaskUpdateParameter taskUpdateParameter, TaskUpdateOptions taskUpdateOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Update(jobId, taskId, taskUpdateParameter, taskUpdateOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> If the Task is not a multi-instance Task then this returns an empty collection. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="taskId"> The ID of the Task. </param>
        /// <param name="taskListSubtasksOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CloudTaskListSubtasksResult>> ListSubtasksAsync(string jobId, string taskId, TaskListSubtasksOptions taskListSubtasksOptions, CancellationToken cancellationToken = default)
        {
            return await RestClient.ListSubtasksAsync(jobId, taskId, taskListSubtasksOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> If the Task is not a multi-instance Task then this returns an empty collection. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="taskId"> The ID of the Task. </param>
        /// <param name="taskListSubtasksOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CloudTaskListSubtasksResult> ListSubtasks(string jobId, string taskId, TaskListSubtasksOptions taskListSubtasksOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.ListSubtasks(jobId, taskId, taskListSubtasksOptions, cancellationToken);
        }

        /// <summary> When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background. </summary>
        /// <param name="jobId"> The ID of the Job containing the Task. </param>
        /// <param name="taskId"> The ID of the Task to terminate. </param>
        /// <param name="taskTerminateOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> TerminateAsync(string jobId, string taskId, TaskTerminateOptions taskTerminateOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.TerminateAsync(jobId, taskId, taskTerminateOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background. </summary>
        /// <param name="jobId"> The ID of the Job containing the Task. </param>
        /// <param name="taskId"> The ID of the Task to terminate. </param>
        /// <param name="taskTerminateOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Terminate(string jobId, string taskId, TaskTerminateOptions taskTerminateOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Terminate(jobId, taskId, taskTerminateOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task&apos;s state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting). </summary>
        /// <param name="jobId"> The ID of the Job containing the Task. </param>
        /// <param name="taskId"> The ID of the Task to reactivate. </param>
        /// <param name="taskReactivateOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> ReactivateAsync(string jobId, string taskId, TaskReactivateOptions taskReactivateOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.ReactivateAsync(jobId, taskId, taskReactivateOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task&apos;s state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting). </summary>
        /// <param name="jobId"> The ID of the Job containing the Task. </param>
        /// <param name="taskId"> The ID of the Task to reactivate. </param>
        /// <param name="taskReactivateOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Reactivate(string jobId, string taskId, TaskReactivateOptions taskReactivateOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Reactivate(jobId, taskId, taskReactivateOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="taskListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<CloudTask> ListAsync(string jobId, TaskListOptions taskListOptions, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }

            async Task<Page<CloudTask>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListAsync(jobId, taskListOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<CloudTask>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextPageAsync(nextLink, jobId, taskListOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="taskListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<CloudTask> List(string jobId, TaskListOptions taskListOptions, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }

            Page<CloudTask> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.List(jobId, taskListOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<CloudTask> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNextPage(nextLink, jobId, taskListOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
