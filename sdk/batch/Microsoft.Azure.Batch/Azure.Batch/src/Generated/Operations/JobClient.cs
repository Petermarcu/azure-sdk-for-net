// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Batch.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Batch
{
    public partial class JobClient
    {
        private readonly ClientDiagnostics clientDiagnostics;
        private readonly HttpPipeline pipeline;
        internal JobRestClient RestClient { get; }
        /// <summary> Initializes a new instance of JobClient for mocking. </summary>
        protected JobClient()
        {
        }
        /// <summary> Initializes a new instance of JobClient. </summary>
        internal JobClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string batchUrl, string apiVersion = "2020-03-01.11.0")
        {
            RestClient = new JobRestClient(clientDiagnostics, pipeline, batchUrl, apiVersion);
            this.clientDiagnostics = clientDiagnostics;
            this.pipeline = pipeline;
        }

        /// <summary> Statistics are aggregated across all Jobs that have ever existed in the Account, from Account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes. </summary>
        /// <param name="jobGetAllLifetimeStatisticsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<JobStatistics>> GetAllLifetimeStatisticsAsync(JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAllLifetimeStatisticsAsync(jobGetAllLifetimeStatisticsOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Statistics are aggregated across all Jobs that have ever existed in the Account, from Account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes. </summary>
        /// <param name="jobGetAllLifetimeStatisticsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<JobStatistics> GetAllLifetimeStatistics(JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.GetAllLifetimeStatistics(jobGetAllLifetimeStatisticsOptions, cancellationToken);
        }

        /// <summary> Deleting a Job also deletes all Tasks that are part of that Job, and all Job statistics. This also overrides the retention period for Task data; that is, if the Job contains Tasks which are still retained on Compute Nodes, the Batch services deletes those Tasks&apos; working directories and all their contents.  When a Delete Job request is received, the Batch service sets the Job to the deleting state. All update operations on a Job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the Job is being deleted. </summary>
        /// <param name="jobId"> The ID of the Job to delete. </param>
        /// <param name="jobDeleteOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string jobId, JobDeleteOptions jobDeleteOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.DeleteAsync(jobId, jobDeleteOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> Deleting a Job also deletes all Tasks that are part of that Job, and all Job statistics. This also overrides the retention period for Task data; that is, if the Job contains Tasks which are still retained on Compute Nodes, the Batch services deletes those Tasks&apos; working directories and all their contents.  When a Delete Job request is received, the Batch service sets the Job to the deleting state. All update operations on a Job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the Job is being deleted. </summary>
        /// <param name="jobId"> The ID of the Job to delete. </param>
        /// <param name="jobDeleteOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string jobId, JobDeleteOptions jobDeleteOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Delete(jobId, jobDeleteOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> Gets information about the specified Job. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="jobGetOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CloudJob>> GetAsync(string jobId, JobGetOptions jobGetOptions, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAsync(jobId, jobGetOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets information about the specified Job. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="jobGetOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CloudJob> Get(string jobId, JobGetOptions jobGetOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Get(jobId, jobGetOptions, cancellationToken);
        }

        /// <summary> This replaces only the Job properties specified in the request. For example, if the Job has constraints, and a request does not specify the constraints element, then the Job keeps the existing constraints. </summary>
        /// <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        /// <param name="jobPatchParameter"> The parameters for the request. </param>
        /// <param name="jobPatchOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PatchAsync(string jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.PatchAsync(jobId, jobPatchParameter, jobPatchOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> This replaces only the Job properties specified in the request. For example, if the Job has constraints, and a request does not specify the constraints element, then the Job keeps the existing constraints. </summary>
        /// <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        /// <param name="jobPatchParameter"> The parameters for the request. </param>
        /// <param name="jobPatchOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Patch(string jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Patch(jobId, jobPatchParameter, jobPatchOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> This fully replaces all the updatable properties of the Job. For example, if the Job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints. </summary>
        /// <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        /// <param name="jobUpdateParameter"> The parameters for the request. </param>
        /// <param name="jobUpdateOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateAsync(string jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.UpdateAsync(jobId, jobUpdateParameter, jobUpdateOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> This fully replaces all the updatable properties of the Job. For example, if the Job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints. </summary>
        /// <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        /// <param name="jobUpdateParameter"> The parameters for the request. </param>
        /// <param name="jobUpdateOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Update(string jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Update(jobId, jobUpdateParameter, jobUpdateOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> The Batch Service immediately moves the Job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running Tasks of the Job. The Job remains in the disabling state until the disable operation is completed and all Tasks have been dealt with according to the disableTasks option; the Job then moves to the disabled state. No new Tasks are started under the Job until it moves back to active state. If you try to disable a Job that is in any state other than active, disabling, or disabled, the request fails with status code 409. </summary>
        /// <param name="jobId"> The ID of the Job to disable. </param>
        /// <param name="jobDisableParameter"> The parameters for the request. </param>
        /// <param name="jobDisableOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DisableAsync(string jobId, JobDisableParameter jobDisableParameter, JobDisableOptions jobDisableOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.DisableAsync(jobId, jobDisableParameter, jobDisableOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> The Batch Service immediately moves the Job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running Tasks of the Job. The Job remains in the disabling state until the disable operation is completed and all Tasks have been dealt with according to the disableTasks option; the Job then moves to the disabled state. No new Tasks are started under the Job until it moves back to active state. If you try to disable a Job that is in any state other than active, disabling, or disabled, the request fails with status code 409. </summary>
        /// <param name="jobId"> The ID of the Job to disable. </param>
        /// <param name="jobDisableParameter"> The parameters for the request. </param>
        /// <param name="jobDisableOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Disable(string jobId, JobDisableParameter jobDisableParameter, JobDisableOptions jobDisableOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Disable(jobId, jobDisableParameter, jobDisableOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> When you call this API, the Batch service sets a disabled Job to the enabling state. After the this operation is completed, the Job moves to the active state, and scheduling of new Tasks under the Job resumes. The Batch service does not allow a Task to remain in the active state for more than 180 days. Therefore, if you enable a Job containing active Tasks which were added more than 180 days ago, those Tasks will not run. </summary>
        /// <param name="jobId"> The ID of the Job to enable. </param>
        /// <param name="jobEnableOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> EnableAsync(string jobId, JobEnableOptions jobEnableOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.EnableAsync(jobId, jobEnableOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> When you call this API, the Batch service sets a disabled Job to the enabling state. After the this operation is completed, the Job moves to the active state, and scheduling of new Tasks under the Job resumes. The Batch service does not allow a Task to remain in the active state for more than 180 days. Therefore, if you enable a Job containing active Tasks which were added more than 180 days ago, those Tasks will not run. </summary>
        /// <param name="jobId"> The ID of the Job to enable. </param>
        /// <param name="jobEnableOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Enable(string jobId, JobEnableOptions jobEnableOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Enable(jobId, jobEnableOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> When a Terminate Job request is received, the Batch service sets the Job to the terminating state. The Batch service then terminates any running Tasks associated with the Job and runs any required Job release Tasks. Then the Job moves into the completed state. If there are any Tasks in the Job in the active state, they will remain in the active state. Once a Job is terminated, new Tasks cannot be added and any remaining active Tasks will not be scheduled. </summary>
        /// <param name="jobId"> The ID of the Job to terminate. </param>
        /// <param name="jobTerminateParameter"> The parameters for the request. </param>
        /// <param name="jobTerminateOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> TerminateAsync(string jobId, JobTerminateParameter jobTerminateParameter, JobTerminateOptions jobTerminateOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.TerminateAsync(jobId, jobTerminateParameter, jobTerminateOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> When a Terminate Job request is received, the Batch service sets the Job to the terminating state. The Batch service then terminates any running Tasks associated with the Job and runs any required Job release Tasks. Then the Job moves into the completed state. If there are any Tasks in the Job in the active state, they will remain in the active state. Once a Job is terminated, new Tasks cannot be added and any remaining active Tasks will not be scheduled. </summary>
        /// <param name="jobId"> The ID of the Job to terminate. </param>
        /// <param name="jobTerminateParameter"> The parameters for the request. </param>
        /// <param name="jobTerminateOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Terminate(string jobId, JobTerminateParameter jobTerminateParameter, JobTerminateOptions jobTerminateOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Terminate(jobId, jobTerminateParameter, jobTerminateOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> The Batch service supports two ways to control the work done as part of a Job. In the first approach, the user specifies a Job Manager Task. The Batch service launches this Task when it is ready to start the Job. The Job Manager Task controls all other Tasks that run under this Job, by using the Task APIs. In the second approach, the user directly controls the execution of Tasks under an active Job, by using the Task APIs. Also note: when naming Jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers. </summary>
        /// <param name="job"> The Job to be added. </param>
        /// <param name="jobAddOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddAsync(JobAddParameter job, JobAddOptions jobAddOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.AddAsync(job, jobAddOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> The Batch service supports two ways to control the work done as part of a Job. In the first approach, the user specifies a Job Manager Task. The Batch service launches this Task when it is ready to start the Job. The Job Manager Task controls all other Tasks that run under this Job, by using the Task APIs. In the second approach, the user directly controls the execution of Tasks under an active Job, by using the Task APIs. Also note: when naming Jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers. </summary>
        /// <param name="job"> The Job to be added. </param>
        /// <param name="jobAddOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Add(JobAddParameter job, JobAddOptions jobAddOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Add(job, jobAddOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> Task counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks which succeeded or failed. Tasks in the preparing state are counted as running. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="jobGetTaskCountsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TaskCounts>> GetTaskCountsAsync(string jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetTaskCountsAsync(jobId, jobGetTaskCountsOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Task counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks which succeeded or failed. Tasks in the preparing state are counted as running. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="jobGetTaskCountsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TaskCounts> GetTaskCounts(string jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.GetTaskCounts(jobId, jobGetTaskCountsOptions, cancellationToken);
        }

        /// <summary> Lists all of the Jobs in the specified Account. </summary>
        /// <param name="jobListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<CloudJob> ListAsync(JobListOptions jobListOptions, CancellationToken cancellationToken = default)
        {
            async Task<Page<CloudJob>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListAsync(jobListOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<CloudJob>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextPageAsync(nextLink, jobListOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all of the Jobs in the specified Account. </summary>
        /// <param name="jobListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<CloudJob> List(JobListOptions jobListOptions, CancellationToken cancellationToken = default)
        {
            Page<CloudJob> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.List(jobListOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<CloudJob> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNextPage(nextLink, jobListOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists the Jobs that have been created under the specified Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule from which you want to get a list of Jobs. </param>
        /// <param name="jobListFromJobScheduleOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<CloudJob> ListFromJobScheduleAsync(string jobScheduleId, JobListFromJobScheduleOptions jobListFromJobScheduleOptions, CancellationToken cancellationToken = default)
        {
            if (jobScheduleId == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleId));
            }

            async Task<Page<CloudJob>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListFromJobScheduleAsync(jobScheduleId, jobListFromJobScheduleOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<CloudJob>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListFromJobScheduleNextPageAsync(nextLink, jobScheduleId, jobListFromJobScheduleOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists the Jobs that have been created under the specified Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule from which you want to get a list of Jobs. </param>
        /// <param name="jobListFromJobScheduleOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<CloudJob> ListFromJobSchedule(string jobScheduleId, JobListFromJobScheduleOptions jobListFromJobScheduleOptions, CancellationToken cancellationToken = default)
        {
            if (jobScheduleId == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleId));
            }

            Page<CloudJob> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListFromJobSchedule(jobScheduleId, jobListFromJobScheduleOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<CloudJob> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListFromJobScheduleNextPage(nextLink, jobScheduleId, jobListFromJobScheduleOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> This API returns the Job Preparation and Job Release Task status on all Compute Nodes that have run the Job Preparation or Job Release Task. This includes Compute Nodes which have since been removed from the Pool. If this API is invoked on a Job which has no Job Preparation or Job Release Task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="jobListPreparationAndReleaseTaskStatusOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<JobPreparationAndReleaseTaskExecutionInformation> ListPreparationAndReleaseTaskStatusAsync(string jobId, JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }

            async Task<Page<JobPreparationAndReleaseTaskExecutionInformation>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListPreparationAndReleaseTaskStatusAsync(jobId, jobListPreparationAndReleaseTaskStatusOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<JobPreparationAndReleaseTaskExecutionInformation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListPreparationAndReleaseTaskStatusNextPageAsync(nextLink, jobId, jobListPreparationAndReleaseTaskStatusOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> This API returns the Job Preparation and Job Release Task status on all Compute Nodes that have run the Job Preparation or Job Release Task. This includes Compute Nodes which have since been removed from the Pool. If this API is invoked on a Job which has no Job Preparation or Job Release Task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="jobListPreparationAndReleaseTaskStatusOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<JobPreparationAndReleaseTaskExecutionInformation> ListPreparationAndReleaseTaskStatus(string jobId, JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions, CancellationToken cancellationToken = default)
        {
            if (jobId == null)
            {
                throw new ArgumentNullException(nameof(jobId));
            }

            Page<JobPreparationAndReleaseTaskExecutionInformation> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.ListPreparationAndReleaseTaskStatus(jobId, jobListPreparationAndReleaseTaskStatusOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<JobPreparationAndReleaseTaskExecutionInformation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListPreparationAndReleaseTaskStatusNextPage(nextLink, jobId, jobListPreparationAndReleaseTaskStatusOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
