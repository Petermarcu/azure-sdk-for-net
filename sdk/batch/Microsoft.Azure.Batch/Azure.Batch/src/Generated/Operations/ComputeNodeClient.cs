// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Batch.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Batch
{
    public partial class ComputeNodeClient
    {
        private readonly ClientDiagnostics clientDiagnostics;
        private readonly HttpPipeline pipeline;
        internal ComputeNodeRestClient RestClient { get; }
        /// <summary> Initializes a new instance of ComputeNodeClient for mocking. </summary>
        protected ComputeNodeClient()
        {
        }
        /// <summary> Initializes a new instance of ComputeNodeClient. </summary>
        internal ComputeNodeClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string batchUrl, string apiVersion = "2020-03-01.11.0")
        {
            RestClient = new ComputeNodeRestClient(clientDiagnostics, pipeline, batchUrl, apiVersion);
            this.clientDiagnostics = clientDiagnostics;
            this.pipeline = pipeline;
        }

        /// <summary> You can add a user Account to a Compute Node only when it is in the idle or running state. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the machine on which you want to create a user Account. </param>
        /// <param name="user"> The user Account to be created. </param>
        /// <param name="computeNodeAddUserOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddUserAsync(string poolId, string nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.AddUserAsync(poolId, nodeId, user, computeNodeAddUserOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> You can add a user Account to a Compute Node only when it is in the idle or running state. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the machine on which you want to create a user Account. </param>
        /// <param name="user"> The user Account to be created. </param>
        /// <param name="computeNodeAddUserOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddUser(string poolId, string nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.AddUser(poolId, nodeId, user, computeNodeAddUserOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> You can delete a user Account to a Compute Node only when it is in the idle or running state. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the machine on which you want to delete a user Account. </param>
        /// <param name="userName"> The name of the user Account to delete. </param>
        /// <param name="computeNodeDeleteUserOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteUserAsync(string poolId, string nodeId, string userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.DeleteUserAsync(poolId, nodeId, userName, computeNodeDeleteUserOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> You can delete a user Account to a Compute Node only when it is in the idle or running state. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the machine on which you want to delete a user Account. </param>
        /// <param name="userName"> The name of the user Account to delete. </param>
        /// <param name="computeNodeDeleteUserOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteUser(string poolId, string nodeId, string userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.DeleteUser(poolId, nodeId, userName, computeNodeDeleteUserOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user Account on a Compute Node only when it is in the idle or running state. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the machine on which you want to update a user Account. </param>
        /// <param name="userName"> The name of the user Account to update. </param>
        /// <param name="nodeUpdateUserParameter"> The parameters for the request. </param>
        /// <param name="computeNodeUpdateUserOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateUserAsync(string poolId, string nodeId, string userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.UpdateUserAsync(poolId, nodeId, userName, nodeUpdateUserParameter, computeNodeUpdateUserOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user Account on a Compute Node only when it is in the idle or running state. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the machine on which you want to update a user Account. </param>
        /// <param name="userName"> The name of the user Account to update. </param>
        /// <param name="nodeUpdateUserParameter"> The parameters for the request. </param>
        /// <param name="computeNodeUpdateUserOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateUser(string poolId, string nodeId, string userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.UpdateUser(poolId, nodeId, userName, nodeUpdateUserParameter, computeNodeUpdateUserOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> Gets information about the specified Compute Node. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to get information about. </param>
        /// <param name="computeNodeGetOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ComputeNode>> GetAsync(string poolId, string nodeId, ComputeNodeGetOptions computeNodeGetOptions, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAsync(poolId, nodeId, computeNodeGetOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets information about the specified Compute Node. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to get information about. </param>
        /// <param name="computeNodeGetOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ComputeNode> Get(string poolId, string nodeId, ComputeNodeGetOptions computeNodeGetOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Get(poolId, nodeId, computeNodeGetOptions, cancellationToken);
        }

        /// <summary> You can restart a Compute Node only if it is in an idle or running state. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="nodeRebootParameter"> The parameters for the request. </param>
        /// <param name="computeNodeRebootOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RebootAsync(string poolId, string nodeId, NodeRebootParameter nodeRebootParameter, ComputeNodeRebootOptions computeNodeRebootOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.RebootAsync(poolId, nodeId, nodeRebootParameter, computeNodeRebootOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> You can restart a Compute Node only if it is in an idle or running state. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="nodeRebootParameter"> The parameters for the request. </param>
        /// <param name="computeNodeRebootOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Reboot(string poolId, string nodeId, NodeRebootParameter nodeRebootParameter, ComputeNodeRebootOptions computeNodeRebootOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Reboot(poolId, nodeId, nodeRebootParameter, computeNodeRebootOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API can be invoked only on Pools created with the cloud service configuration property. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="nodeReimageParameter"> The parameters for the request. </param>
        /// <param name="computeNodeReimageOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> ReimageAsync(string poolId, string nodeId, NodeReimageParameter nodeReimageParameter, ComputeNodeReimageOptions computeNodeReimageOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.ReimageAsync(poolId, nodeId, nodeReimageParameter, computeNodeReimageOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API can be invoked only on Pools created with the cloud service configuration property. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="nodeReimageParameter"> The parameters for the request. </param>
        /// <param name="computeNodeReimageOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Reimage(string poolId, string nodeId, NodeReimageParameter nodeReimageParameter, ComputeNodeReimageOptions computeNodeReimageOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Reimage(poolId, nodeId, nodeReimageParameter, computeNodeReimageOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node on which you want to disable Task scheduling. </param>
        /// <param name="nodeDisableSchedulingParameter"> The parameters for the request. </param>
        /// <param name="computeNodeDisableSchedulingOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DisableSchedulingAsync(string poolId, string nodeId, NodeDisableSchedulingParameter nodeDisableSchedulingParameter, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.DisableSchedulingAsync(poolId, nodeId, nodeDisableSchedulingParameter, computeNodeDisableSchedulingOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node on which you want to disable Task scheduling. </param>
        /// <param name="nodeDisableSchedulingParameter"> The parameters for the request. </param>
        /// <param name="computeNodeDisableSchedulingOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DisableScheduling(string poolId, string nodeId, NodeDisableSchedulingParameter nodeDisableSchedulingParameter, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.DisableScheduling(poolId, nodeId, nodeDisableSchedulingParameter, computeNodeDisableSchedulingOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node on which you want to enable Task scheduling. </param>
        /// <param name="computeNodeEnableSchedulingOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> EnableSchedulingAsync(string poolId, string nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions, CancellationToken cancellationToken = default)
        {
            return (await RestClient.EnableSchedulingAsync(poolId, nodeId, computeNodeEnableSchedulingOptions, cancellationToken).ConfigureAwait(false)).GetRawResponse();
        }

        /// <summary> You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node on which you want to enable Task scheduling. </param>
        /// <param name="computeNodeEnableSchedulingOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response EnableScheduling(string poolId, string nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.EnableScheduling(poolId, nodeId, computeNodeEnableSchedulingOptions, cancellationToken).GetRawResponse();
        }

        /// <summary> Before you can remotely login to a Compute Node using the remote login settings, you must create a user Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node for which to obtain the remote login settings. </param>
        /// <param name="computeNodeGetRemoteLoginSettingsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ComputeNodeGetRemoteLoginSettingsResult>> GetRemoteLoginSettingsAsync(string poolId, string nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetRemoteLoginSettingsAsync(poolId, nodeId, computeNodeGetRemoteLoginSettingsOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Before you can remotely login to a Compute Node using the remote login settings, you must create a user Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node for which to obtain the remote login settings. </param>
        /// <param name="computeNodeGetRemoteLoginSettingsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ComputeNodeGetRemoteLoginSettingsResult> GetRemoteLoginSettings(string poolId, string nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.GetRemoteLoginSettings(poolId, nodeId, computeNodeGetRemoteLoginSettingsOptions, cancellationToken);
        }

        /// <summary> Before you can access a Compute Node by using the RDP file, you must create a user Account on the Compute Node. This API can only be invoked on Pools created with a cloud service configuration. For Pools created with a virtual machine configuration, see the GetRemoteLoginSettings API. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node for which you want to get the Remote Desktop Protocol file. </param>
        /// <param name="computeNodeGetRemoteDesktopOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Stream>> GetRemoteDesktopAsync(string poolId, string nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetRemoteDesktopAsync(poolId, nodeId, computeNodeGetRemoteDesktopOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Before you can access a Compute Node by using the RDP file, you must create a user Account on the Compute Node. This API can only be invoked on Pools created with a cloud service configuration. For Pools created with a virtual machine configuration, see the GetRemoteLoginSettings API. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node for which you want to get the Remote Desktop Protocol file. </param>
        /// <param name="computeNodeGetRemoteDesktopOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Stream> GetRemoteDesktop(string poolId, string nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.GetRemoteDesktop(poolId, nodeId, computeNodeGetRemoteDesktopOptions, cancellationToken);
        }

        /// <summary> This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node from which you want to upload the Azure Batch service log files. </param>
        /// <param name="uploadBatchServiceLogsConfiguration"> The Azure Batch service log files upload configuration. </param>
        /// <param name="computeNodeUploadBatchServiceLogsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<UploadBatchServiceLogsResult>> UploadBatchServiceLogsAsync(string poolId, string nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions, CancellationToken cancellationToken = default)
        {
            return await RestClient.UploadBatchServiceLogsAsync(poolId, nodeId, uploadBatchServiceLogsConfiguration, computeNodeUploadBatchServiceLogsOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node from which you want to upload the Azure Batch service log files. </param>
        /// <param name="uploadBatchServiceLogsConfiguration"> The Azure Batch service log files upload configuration. </param>
        /// <param name="computeNodeUploadBatchServiceLogsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<UploadBatchServiceLogsResult> UploadBatchServiceLogs(string poolId, string nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.UploadBatchServiceLogs(poolId, nodeId, uploadBatchServiceLogsConfiguration, computeNodeUploadBatchServiceLogsOptions, cancellationToken);
        }

        /// <summary> Lists the Compute Nodes in the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool from which you want to list Compute Nodes. </param>
        /// <param name="computeNodeListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ComputeNode> ListAsync(string poolId, ComputeNodeListOptions computeNodeListOptions, CancellationToken cancellationToken = default)
        {
            if (poolId == null)
            {
                throw new ArgumentNullException(nameof(poolId));
            }

            async Task<Page<ComputeNode>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListAsync(poolId, computeNodeListOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<ComputeNode>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextPageAsync(nextLink, poolId, computeNodeListOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists the Compute Nodes in the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool from which you want to list Compute Nodes. </param>
        /// <param name="computeNodeListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ComputeNode> List(string poolId, ComputeNodeListOptions computeNodeListOptions, CancellationToken cancellationToken = default)
        {
            if (poolId == null)
            {
                throw new ArgumentNullException(nameof(poolId));
            }

            Page<ComputeNode> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.List(poolId, computeNodeListOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<ComputeNode> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNextPage(nextLink, poolId, computeNodeListOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
