// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Batch.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Batch
{
    public partial class ApplicationClient
    {
        private readonly ClientDiagnostics clientDiagnostics;
        private readonly HttpPipeline pipeline;
        internal ApplicationRestClient RestClient { get; }
        /// <summary> Initializes a new instance of ApplicationClient for mocking. </summary>
        protected ApplicationClient()
        {
        }
        /// <summary> Initializes a new instance of ApplicationClient. </summary>
        internal ApplicationClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string batchUrl, string apiVersion = "2020-03-01.11.0")
        {
            RestClient = new ApplicationRestClient(clientDiagnostics, pipeline, batchUrl, apiVersion);
            this.clientDiagnostics = clientDiagnostics;
            this.pipeline = pipeline;
        }

        /// <summary> This operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about Applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API. </summary>
        /// <param name="applicationId"> The ID of the Application. </param>
        /// <param name="applicationGetOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ApplicationSummary>> GetAsync(string applicationId, ApplicationGetOptions applicationGetOptions, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetAsync(applicationId, applicationGetOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> This operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about Applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API. </summary>
        /// <param name="applicationId"> The ID of the Application. </param>
        /// <param name="applicationGetOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ApplicationSummary> Get(string applicationId, ApplicationGetOptions applicationGetOptions, CancellationToken cancellationToken = default)
        {
            return RestClient.Get(applicationId, applicationGetOptions, cancellationToken);
        }

        /// <summary> This operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API. </summary>
        /// <param name="applicationListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ApplicationSummary> ListAsync(ApplicationListOptions applicationListOptions, CancellationToken cancellationToken = default)
        {
            async Task<Page<ApplicationSummary>> FirstPageFunc(int? pageSizeHint)
            {
                var response = await RestClient.ListAsync(applicationListOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            async Task<Page<ApplicationSummary>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = await RestClient.ListNextPageAsync(nextLink, applicationListOptions, cancellationToken).ConfigureAwait(false);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> This operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API. </summary>
        /// <param name="applicationListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ApplicationSummary> List(ApplicationListOptions applicationListOptions, CancellationToken cancellationToken = default)
        {
            Page<ApplicationSummary> FirstPageFunc(int? pageSizeHint)
            {
                var response = RestClient.List(applicationListOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            Page<ApplicationSummary> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                var response = RestClient.ListNextPage(nextLink, applicationListOptions, cancellationToken);
                return Page.FromValues(response.Value.Value, response.Value.OdataNextLink, response.GetRawResponse());
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
